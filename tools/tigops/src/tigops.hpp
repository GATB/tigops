/*****************************************************************************
 *   GATB : Genome Assembly Tool Box
 *   Copyright (C) 2014  INRIA
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

#ifndef _TOOL_tigops_HPP_
#define _TOOL_tigops_HPP_

/********************************************************************************/
#include <gatb/gatb_core.hpp>
/********************************************************************************/

////////////////////////////////////////////////////////////////////////////////
//
// THIS FILE IS AUTOMATICALLY GENERATED...
//
// THIS IS A SIMPLE EXAMPLE HOW TO USE THE Tool CLASS. IF YOU WANT MORE FEATURES,
// YOU CAN HAVE A LOOK AT THE ToyTool SNIPPET HERE:
//
//      http://gatb-core.gforge.inria.fr/snippets_tools.html
//
////////////////////////////////////////////////////////////////////////////////

/** NOTE: we should not include namespaces here => only to make user life easier... (copied from lena) */
using namespace gatb::core;
using namespace gatb::core::tools;
using namespace gatb::core::bank;
using namespace gatb::core::kmer::impl;

using namespace gatb::core::system;
using namespace gatb::core::system::impl;


// until a better solution that involves templating things in the .cpp (see email "k>32 for bloocoo/leon")
#define span KMER_SPAN(1)

typedef kmer::impl::Kmer<span>::Type  kmer_type;
typedef kmer::impl::Kmer<span>::Count kmer_count;

class tigops : public Tool
{
public:

    // Constructor
    tigops ();

    // Actual job done by the tool is here
    void execute ();

    size_t          _sizeKmer;
	int _debug ;
};

/********************************************************************************/

#endif /* _TOOL_tigops_HPP_ */

